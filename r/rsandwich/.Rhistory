library(rgdal)
library(ggplot2)
help("ggplot2")
help("plot")
help("ggplot2")
help("plot")
help(iris)
help("ggplot2")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
help(rgdal0
)
library(sp)
help(sp)
library(rsandwich)
help(rsandwich)
library(ggplot2)
help("ggplot2")
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
install.packages("roxygen2")
library(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
library(rsandwich)
help(rsandwich-package)
help(rsandwich)
library(rsandwich)
help(rsandwich-package)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
help(rsandwich)
library(rsandwich)
library(rsandwich)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
save(myediteddata, file="data.rda")
library(sf)
install.packages(sf)
install.packages("sf")
library(sf)
nc <- read_sf(system.file("data/hs_sampling_prj.shp", package = "sf"))
hs.sampling <- read_sf(system.file("data/hs_sampling_prj.shp", package = "sf"))
setwd("..")
getwd()
hs.sampling <- read_sf(system.file("data/hs_sampling_prj.shp", package = "sf"))
hs.sampling <- read_sf("data/hs_sampling_prj.shp", package = "sf")
hs.sampling <- read_sf(system.file("rsandwich/data/hs_sampling_prj.shp", package = "sf"))
hs.sampling <- read_sf(system.file("data\hs_sampling_prj.shp", package = "sf"))
hs.sampling <- read_sf(system.file("data//hs_sampling_prj.shp", package = "sf")
)
hs.sampling <- read_sf(system.file("data", layer = "hs_sampling_prj")
)
hs.sampling <- read_sf("rsandwich/data", layer = "hs_sampling_prj")
write_rds(hs.sampling, path = file.path("rsandwich/data", "hs.sampling.rds"))
library(tidyverse)
install.packages(‘tidyverse’)
install.packages("tidyverse")
write_rds(hs.sampling, path = file.path("rsandwich/data", "hs.sampling.rds"))
library(tidyverse)
write_rds(hs.sampling, path = file.path("rsandwich/data", "hs.sampling.rds"))
write_rds(hs.sampling, file = file.path("rsandwich/data", "hs.sampling.rds"))
save(hs.sampling, file = file.path("rsandwich/data", "hs.sampling.rds"))
save(hs.sampling, file = file.path("rsandwich/data", "hs.sampling.RData"))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/rsandwich/data/hs.sampling.RData")
plot(hs.sampling)
hs.sampling <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/rsandwich/data/hs.sampling.rds")
hs.ssh <- read_sf(system.file("data/hs_SSH_prj.shp", package = "sf"))
hs.ssh <- read_sf("rsandwich/data", layer = "hs_SSH_prj")
save(hs.ssh, file = file.path("rsandwich/data", "hs.ssh.RData"))
plot(hs.ssh)
hs.reporting <- read_sf(system.file("data/hs_town_prj.shp", package = "sf"))
hs.reporting <- read_sf("rsandwich/data", layer = "hs_town_prj")
save(hs.reporting, file = file.path("rsandwich/data", "hs.reporting.RData")
)
roxygen2::roxygenise()
setwd()
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
#' \code{rsandwich}: Spatial Interpolation of Spatially Stratified Heterogeneous Populations
#' The package \code{rsandwich} provides tools to interpolate a spatially stratified heterogeneous population with high accuracy, even when its spatial autocorrelation is weak. These tools allow the calculation of critical summarized statistics such as Geodetector \emph{q} and Moran's \emph{I}. They also enable the visualization of the interpolated surface and the variance and confidence interval maps.
#' Yue Lin, Chengdong Xu and Jinfeng Wang
#' @references
#' Wang, J. F., Haining, R., Liu, T. J., Li, L. F., & Jiang, C. S. (2013). Sandwich estimation for multi-unit reporting on a stratified heterogeneous surface. \emph{Environment and Planning A}, 45(10), 2515-2534. doi:\link[https://doi.org/10.1068/a44710]{10.1068/a44710}
#' @import sp rgeos maptools spdep rgdal deldir raster grDevices methods
#' @importFrom stats optim
#' @docType package
#' @name rsandwich
NULL
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
help{iris}
help(iris)
roxygen2::roxygenise()
library(rsandwich)
help(hs)
library(sp)
data(sf.sampling)
sf.sampling
roxygen2::roxygenise()
library(rsandwich)
data("hs.sampling")
library(rsandwich)
help(hs)
roxygen2::roxygenise()
library(rsandwich)
help(hs)
data("hs.sampling")
data("hs.ssh")
data("hs.reporting")
library(ggplot2)
head("hs.sampling")
head(hs.sampling)
hs.sampling
summary(hs.sampling$Population)
is.projected(hs.sampling)
library(sp)
is.projected(hs.sampling)
plot(hs.sampling$Population)
plot(hs.sampling)
data("hs.sampling")
plot(hs.sampling)
plot(hs.ssh)
plot(st_geometry(hs.samplin))
library(sf)
plot(st_geometry(hs.sampling))
plot(st_geometry(hs.sampling), col = sf.colors(3, categorical = TRUE), border = 'grey',
axes = TRUE)
plot(st_geometry(hs.ssh))
plot(st_geometry(hs.reporting))
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
help(hs)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
Not sure when this was fixed but with roxygen2 version 6.0.1 this issue seems resolved.
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(rsandwich)
help(hs)
roxygen2::roxygenise()
library(rsandwich)
help(hs)
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/rsandwich/data/hs.sampling.RData")
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/rsandwich/data/hs.ssh.RData")
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/rsandwich/data/hs.reporting.RData")
for (i in sampling.lyr){
print(i)
}
for (i in sampling.hs){
print(i)
}
for (i in hs.sampling){
print(i)
}
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling,hs.ssh,hs.reporting)
devtools::load_all(".")
sampling(hs.sampling, hs.ssh, hs.reporting)
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting)
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
v
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
numeric(0)
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
install.packages("spatstat")
install.packages("units")
install.packages("units")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
library(st)
library(sf)
b0 = st_polygon(list(rbind(c(-1,-1), c(1,-1), c(1,1), c(-1,1), c(-1,-1))))
b1 = b0 + 2
b2 = b0 + c(-0.2, 2)
x = st_sfc(b0, b1, b2)
st_area(x)
class(st_area(x))
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
pts = st_sfc(st_point(c(.5,.5)), st_point(c(1.5, 1.5)), st_point(c(2.5, 2.5)))
pol = st_polygon(list(rbind(c(0,0), c(2,0), c(2,2), c(0,2), c(0,0))))
(lst = st_intersects(pts, pol))
(mat = st_intersects(pts, pol, sparse = FALSE))
# which points fall inside a polygon?
apply(mat, 1, any)
lengths(lst) > 0
# which points fall inside the first polygon?
st_intersects(pol, pts)[[1]]
st_intersects(pol, pts)
st_intersects(pts, pol, sparse = FALSE)
st_intersects(pts, pol, sparse = FALSE)[1]
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Populatin")
sandwich(hs.ssh, hs.sampling, hs.reporting, "Population")
sandwich(hs.ssh, hs.sampling, hs.reporting, "STR")
st_geometry_type(hs.sampling)
st_geometry(hs.sampling)
st_geometry_type(hs.sampling, by_geometry =FALSE)
devtools::load_all(".")
sandwich(hs.ssh, hs.sampling, hs.reporting, "Population")
sandwich(hs.ssh, hs.sampling, hs.reporting, "Population")
devtools::load_all(".")
sandwich(hs.ssh, hs.sampling, hs.reporting, "Population")
st_geometry_type(hs.ssh, by_geometry =FALSE)
devtools::load_all(".")
sandwich(hs.ssh, hs.sampling, hs.reporting, "Population")
sandwich(hs.sampling, hs.sampling, hs.reporting, "Population")
library(rsandwich)
help(sandwich)
roxygen2::roxygenise()
library(rsandwich)
help(sandwich)
roxygen2::roxygenise()
library(rsandwich)
help(sandwich)
usethis::use_vignette("my-vignette")
usethis::use_vignette("rsandwich")
library(rsandwich)
devtools::load_all(".")
sandwich(hs.sampling, hs.sampling, hs.reporting, "Population")
sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
library(rsandwich)
help(rsandwich)
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
roxygen2::roxygenise()
library(rsandwich)
help(rsandwich)
