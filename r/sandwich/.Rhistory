devtools::build_vignettes()
library(rgdal)
library(sp)
library(sandwich)
bc.sampling = load.shp("./data", "bc_sampling")
bc.ssh = load.shp("./data", "bc_ssh")
bc.reporting = load.shp("./data", "bc_reporting")
bc.join = ssh.data(bc.sampling, bc.ssh, "Class")
bc.sw = sandwich.model(bc.sampling, bc.ssh, bc.reporting, "Incidence")
bc.sw.ci = sandwich.ci(bc.sw, level=.95)
save(bc.sw.ci, "./data/bc.sw.ci.RData")
save(bc.sw.ci, "bc.sw.ci.RData")
save(bc.sw.ci, "bc.sw.RData")
save(bc.sw.ci, file = "bc.sw.ci.RData")
rgdal::writeOGR(bc.sw.ci, "./data", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, "", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, "data", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
library(rgdal)
writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
library(raster)
library(sf)
st_write(bc.sw.ci, "./data/nc.shp"))
st_write(bc.sw.ci, "./data/nc.shp")
st_write(bc.sw.ci, "./data/bc.sw.ci.shp")
devtools::load_all(".")
load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
devtools::load_all(".")
devtools::load_all(".")
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.outut = sandwich.model(hs.data, 'Population', type="shp")
hs.data[0]
hs.data
hs.data[[0]]
hs.data[[1]]
devtools::load_all(".")
hs.output = sandwich.model(hs.data, 'Population', type="shp")
devtools::load_all(".")
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.sw = sandwich.model(hs.data, 'Population', type="shp")
hs.sw.ci = sandwich.ci(hs.sw, .95, "shp")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, 'Population', k=5, type="shp")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
roxygen2::roxygenise()
devtools::load_all(".")
load.data.txt("./data/bc_sampling_ssh", "./data/bc_reporting_ssh")
bc.data = read.delim("./data/bc_sampling_ssh", sep=",")
load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
"SSHID" %in% names(bc.data[[1]])
list(c(1,2), c("w1", "w2"))
c(1,"SSHID") %in% names(bc.data[[1]])
c(1,"SSHID") %in% names(bc.data[[1]]) ==FALSE
all(c(1,"SSHID") %in% names(bc.data[[1]]))
NULL %in% names(bc.data[[1]])
! all(c(1,"SSHID") %in% names(bc.data[[1]]))
c(1,2) %in% bc.data[[1]]$SSHID
c(1,2) %in% bc.data[[1]]["SSHID"]
bc.data[[1]]["SSHID"]
1 %in% bc.data[[1]]["SSHID"]
bc.data[[1]]$SSHID
1 %in% bc.data[[1]][["SSHID"]]
unique(bc.data[[1]][["SSHID"]])
length(unique(bc.data[[1]][["SSHID"]]))
unique(sampling_ssh[ssh.id.col])
unique(bc.data[[1]]["SSHID"])
unique(bc.data[[1]]["SSHID"])[1,]
unique(bc.data[[1]]["SSHID"])[2,]
bc.data[bc.data[["SSHID"]]==unique(bc.data[[1]]["SSHID"])[1,],]
bc.data[bc.data[["SSHID"]]==unique(bc.data[[1]]["SSHID"])[1,],]
unique(bc.data[[1]]["SSHID"])[1,]
type(unique(bc.data[[1]]["SSHID"])[1,])
class(unique(bc.data[[1]]["SSHID"])[1,])
bc.data[bc.data[["SSHID"]]==1,]
bc.data[bc.data$SSHID==1,]
bc.data[bc.data$SSHID==1]
bc.data[[1]][bc.data[[1]]$SSHID==1,]
bc.data[[1]][bc.data[[1]]$SSHID==unique(bc.data[[1]]["SSHID"])[1,],]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[1]][bc.data[[1]]$SSHID==2,]
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,3), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
View(bc.output)
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[1]]$SSHID==2
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
View(bc.output)
bc.output[2,]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[2]]
bc.data[[2]][1,]
ssh.weights=list(c(1,2), c("W1","W2"))
ssh.weights[[2]]
ssh.weights[[2]][1]
which(bc.output[["SSHID"]] ==1)
which(bc.output[["SSHID"]] ==2)
ssh.weights[[2]][1]
ssh.weights[[1]][1]
which(bc.output[["SSHID"]] ==ssh.weights[[1]][1])
ssh.weights[[1]]
ssh.weights[[1]]
sorted(ssh.weights[[1]]) == sorted(unique(bc.data[[1]][["SSHID"]]))
sort(ssh.weights[[1]]) == sort(unique(bc.data[[1]][["SSHID"]]))
bc.data[[2]][[ssh.weights[[2]][1]]]
bc.data[[2]][1,][[ssh.weights[[2]][1]]]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
View(bc.output)
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
roxygen2::roxygenise()
devtools::load_all(".")
bc.sw.ci = sandwich.ci(bc.output)
roxygen2::roxygenise()
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GDCODE", all.x = TRUE)
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GBCODE", all.x = TRUE)
View(bc.data)
devtools::load_all(".")
devtools::load_all(".")
load.data.txt("./data/bc_sampling_ssh.csv", "bc_reporting_ssh.csv")
load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
read.delim("./data/bc_reporting_ssh.csv", sep=",", check.names=FALSE)
read.csv("./data/bc_reporting_ssh.csv", sep=",", check.names=FALSE)
read.csv("./data/bc_reporting_ssh.csv", sep=",", fileEncoding = "UTF-8-BOM")
devtools::load_all(".")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
View(bc.output)
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GBCODE", all.x = TRUE)
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
roxygen2::roxygenise()
devtools::build_manual()
library(sandwich)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.data.shp(path="./data", file="hs.sampling.shapefile")
hs.ssh = load.data.shp(path="./data", file="hs.ssh.shapefile")
hs.ssh2 = load.data.shp(path="./data", file="hs.ssh2.shapefile")
hs.reporting = load.data.shp(path="./data", file="hs.reporting.shapefile")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.data.shp(path="./data", file="hs.sampling.shapefile")
hs.ssh = load.data.shp(path="./data", file="hs.ssh.shapefile")
hs.ssh2 = load.data.shp(path="./data", file="hs.ssh2.shapefile")
hs.reporting = load.data.shp(path="./data", file="hs.reporting.shapefile")
hs.sampling = load.data.shp(path="./data", file="hs.sampling.shapefile")
hs.ssh = load.data.shp(path="./data", file="hs.ssh.shapefile")
hs.ssh2 = load.data.shp(path="./data", file="hs.ssh2.shapefile")
hs.reporting = load.data.shp(path="./data", file="hs.reporting.shapefile")
hs.sampling = load.data.shp(path="./data", sampling.file="hs.sampling.shapefile", ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
hs.data = load.data.shp(path="./data", sampling.file="hs.sampling.shapefile", ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.data = load.data.shp(path="./data", sampling.file="hs.sampling.shapefile", ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
hs.join
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
hs.sw = sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
hs.sw
# Plot the mean values of the interpolation estimates
plot.mean(hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(hs.sw)
hs.sw.ci = sandwich.ci(hs.sw, level=.95)
hs.sw.ci
# Plot the confidence intervals of the interpolation estimates
plot.ci(hs.sw.ci)
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv", reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
bc.data[[1]]
# Reporting-SSH
bc.data[[2]]
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
bc.data[[1]].head()
# Reporting-SSH
bc.data[[2]].head()
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer(s) for evaluation
bc.join <- ssh.data.shp(object=bc.data)
bc.join
# Prepare the SSH layer(s) for evaluation
bc.join <- ssh.data.txt(object=bc.data)
bc.join
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Prepare the SSH layer(s) for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor")
devtools::load_all(".")
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library(sandwich)
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor")
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
View(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt", ssh.id.col="SSHID", reporting.id.col="GBCODE", ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
devtools::load_all(".")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
devtools::load_all(".")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
devtools::load_all(".")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
unlink('vignettes/sandwich.r.tutorial_cache', recursive = TRUE)
devtools::load_all(".")
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
unlink('vignettes/sandwich.r.tutorial_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Input another candidate SSH layer for demonstration
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the mean values of the interpolation estimates
plot.mean(object=hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(object=hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
plot.ci(object=hs.sw.ci)
# Perform k-fold cross validation
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt", ssh.id.col="SSHID", reporting.id.col="GBCODE", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.cv)
devtools::load_all(".")
library(sandwich)
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
.Last.error.trace
bc.data[1,][["W1"]]
bc.data[[2]][1,][["W1"]]
bc.data[[2]][1,][["W1"]] != 0
bc.data[[2]][3,][["W1"]] !=0
bc.data[[2]][4,][["W1"]] !=0
bc.data[[2]][4,][["W2"]] !=0
getwd()
library(sandwich)
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Input another candidate SSH layer for demonstration
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the mean values of the interpolation estimates
plot.mean(object=hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(object=hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
plot.ci(object=hs.sw.ci)
# Perform k-fold cross validation
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.cv)
writeOGR(hs.sw.ci, ".", "hs.sw.ci", driver = "ESRI Shapefile")
library(rgdal)
writeOGR(hs.sw.ci, ".", "hs.sw.ci", driver = "ESRI Shapefile")
writeOGR(hs.sw.ci, ".", "hs.sw.ci.shp", driver = "ESRI Shapefile")
hs.sw.ci
writeOGR(hs.sw.ci, dsn = ".", layer = "hs.sw.ci",
driver = "ESRI Shapefile" )
sf::st_write(obj = hs.sw.ci, dsn = "hs.sw.ci.shp")
write.csv(bc.sw.ci, "bc.sw.ci.csv")
mean(bc.sw.ci$se)
max(bc.sw.ci$se)
max(bc.sw.ci$ci.up-bc.sw.ci$ci.low)
mean(bc.sw.ci$ci.up-bc.sw.ci$ci.low)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Input another candidate SSH layer for demonstration
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
roxygen2::roxygenise()
devtools::build_vignettes()
st_write(hs.sw.ci, "hs.sw.ci.shp")
mean(hs.sw.ci$mean)
range(hs.sw.ci$mean)
mean(hs.sw.ci$se)
mean(hs.sw.ci$ci.up-hs.sw.ci$ci.low)
knitr::opts_chunk$set(echo = TRUE)
install.packages("mipfp")
install.packages("png")
install.packages("bookdown")
install.packages("bookdown")
knitr::opts_chunk$set(echo = TRUE)
import("mipfp")
library("mipfp")
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
sf::st_write(obj = hs.sw.ci, dsn = "hs.sw.ci.shp")
