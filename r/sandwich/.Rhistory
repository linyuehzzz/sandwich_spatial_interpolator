class(hs.ssh)
class(join)
st_geometry(join)
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
geodetector.factor("Population", "STR", hs.join)
st_geometry(hs.join) = NULL
hs.join = as.data.frame(object)
hs.join = as.data.frame(hs.join)
geodetector.factor("Population", "STR", hs.join)
library(geodetector)
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor("Population", "STR", hs.join)
devtools::load_all(".")
geodetector.factor("Population", "STR", hs.join)
st_geometry(hs.join) = NULL
hs.join = as.data.frame(hs.join)
factor_detector("Population", "STR", hs.join)
geodetector.factor(hs.join, "Population", "STR")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
geodetector.factor(hs.join, "Population", "STR")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
hs.join = geodetector.data(hs.join, hs.reporting, "CODE")
geodetector.factor(hs.join, "Population", c("STR","CODE"))
geodetector.factor(hs.join, "Population", c("STR","CODE.y"))
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR")
hs.join = geodetector.data(hs.join, hs.reporting, "CODE")
geodetector.factor(hs.join, "Population", c("STR","CODE.y"))
geodetector.interaction(hs.join, "Population", c("STR","CODE.y"))
nc <- read_sf(path=file.path("data", "hs.ssh.shapefile"))
read_sf(system.file("data/hs.ssh.shapefile", package="sf"))
read_sf(system.file("rsandwich/data/hs.ssh.shapefile", package="sf"))
read_sf(dsn = "rsandwich/data", layer = "hs.ssh.shapefile")
get_wd()
getwd()
read_sf(dsn = "data", layer = "hs.ssh.shapefile")
read_sf(dsn = "data", layer = "hs_SSH_prj")
read_sf(dsn = "data", layer = "hs.ssh.shapefile")
library(sf)
read_sf(dsn = "data", layer = "hs.ssh.shapefile")
roxygen2::roxygenise()
devtools::load_all(".")
help(geodetector.data)
load.shp("data","hs.sampling.shapefile")
hs.sampling=load.shp("data","hs.sampling.shapefile")
hs.ssh=load.shp("data","hs.ssh.shapefile")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenise()
install.packages("sandwich")
install.packages("sandwich")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, error=TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
data(CollectData)
hs.sampling = load.shp("data", "hs.sampling.shapefile")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, error=TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
data(CollectData)
hs.sampling = load.shp("data", "hs.sampling.shapefile")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, error=TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, error=TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library("sandwich")
data("hs.sampling.shapefile")
data("hs.ssh.shapefile")
data("hs.reporting.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
data("hs.sampling")
hs.sampling = load.shp(".", "data/hs.sampling.shapefile")
hs.ssh = load.shp(".", "data/hs.ssh.shapefile")
hs.reporting = load.shp(".", "data/hs.reporting.shapefile")
hs.sampling = load.shp("data", "data/hs.sampling.shapefile")
hs.ssh = load.shp(".", "data/hs.ssh.shapefile")
hs.reporting = load.shp(".", "data/hs.reporting.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp(".", "data/hs.ssh.shapefile")
hs.reporting = load.shp(".", "data/hs.reporting.shapefile")
hs.sampling = load.shp("data", "hs.sampling.shapefile")
hs.ssh = load.shp("data", "hs.ssh.shapefile")
hs.reporting = load.shp("data", "hs.reporting.shapefile")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
install.packages("sandwich")
library("sandwich")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
p1 = ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
p2 = ggplot(data=hs.ssh) + geom_sf(aes(fill=STR))
p3 = ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
grid.arrange(p1, p2, p3, nrow=1)
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/SoilType_shp.rda")
plot(SoilType_shp)
library(maptools)
writeSpatialShape(SoilType_shp, "hs.ssh.2.shapefile")
sf::st_write(SoilType_shp, "hs.ssh.2.shapefile")
library(rgdal)
writeOGR(SoilType_shp, "hs.ssh.2.shapefile")
writeOGR(SoilType_shp, "hs.ssh.2.shapefile",driver="ESRI Shapefile")
writeOGR(obj=SoilType_shp, dsn="./data", layer="hs.ssh.2.shapefile",driver="ESRI Shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
View(SoilType_shp)
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(hs.sampling, file= file.path("./data", "hs.sampling.RData"))
library(sf)
write_rds(hs.sampling, file= file.path("./data", "hs.sampling.RData"))
library(tidyverse)
write_rds(hs.sampling, file= file.path("./data", "hs.sampling.RData"))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.RData")
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.RData")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(hs.reporting, file= file.path("./data", "hs.reporting.RData"))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.reporting.RData")
reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(reporting, file= file.path("./data", "hs.reporting.RData"))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.reporting.RData")
data("hs.reporting")
sampling = load.shp("./data", "hs.sampling.shapefile")
write_rds(sampling, file= file.path("./data", "hs.sampling.RData"))
ssh = load.shp("./data", "hs.ssh.shapefile")
write_rds(ssh, file= file.path("./data", "hs.ssh.RData"))
ssh2 = load.shp("./data", "hs.ssh2.shapefile")
write_rds(ssh2, file= file.path("./data", "hs.ssh2.RData"))
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
ssh2 = load.shp("./data", "hs.ssh2.shapefile")
write_rds(ssh2, file= file.path("./data", "hs.ssh2.RData"))
data("hs.ssh2")
write_rds(ssh2, file= file.path("./data", "hs.ssh.b.RData"))
data("hs.ssh.b")
View(ssh2)
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(hs.ssh2, file= file.path("./data", "hs.ssh2.RData"))
load("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.ssh2.RData")
data("hs.ssh2")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
write_rds(hs.ssh2, file= file.path("./data", "hs.ssh2.RData"))
devtools::load_all(".")
devtools::load_all(".")
data("hs.sampling")
data("hs.ssh")
data("hs.reporting")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
data(hs.sampling)
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(hs.reporting, file= file.path("./data", "hs.reporting.RData"))
library(tidyverse)
write_rds(hs.reporting, file= file.path("./data", "hs.reporting.RData"))
write_rds(hs.sampling, file= file.path("./data", "hs.sampling.RData"))
write_rds(hs.ssh, file= file.path("./data", "hs.ssh.RData"))
write_rds(hs.ssh2, file= file.path("./data", "hs.ssh2.RData"))
library(sandwich)
roxygen2::roxygenise()
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1))
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
roxygen2::roxygenise()
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
st_geometry_type(hs.ssh2)
st_geometry_type(hs.ssh2, FALSE)
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
st_crs(hs.ssh2)
st_crs(hs.ssh)
library(sandwich)
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
class(hs.join)
st_geometry_type(hs.ssh2, FALSE)
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
hs.join
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
hs.join
geodetector.factor(hs.join, "Population", c("STR_1", "STR_2"))
devtools::load_all(".")
roxygen2::roxygenise()
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
geodetector.interaction(hs.join, "Population", c("STR_1", "STR_2"))
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out
# mean
plot.mean(hs.out)
# standard error
plot.se(hs.out)
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out
# mean
plot.mean(hs.out)
# standard error
plot.se(hs.out)
sandwich.confint(object, level=.95)
sandwich.confint(hs.out, level=.95)
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
hs.sw.con = sandwich.confint(hs.sw, level=.95)
# confidence interval
plot.ci(hs.sw.con)
roxygen2::roxygenise()
library(sandwich)
devtools::build_manual()
devtools::build_manual()
library(sandwich)
library(sandwich)
R CMD Rd2pdf sandwich
build_manual(pkg = ".", path = NULL)
devtools::build_manual()
R CMD check
library(sandwich)
build_manual(path=getwd())
library(devtools)
build_manual(path=getwd())
check(manual = TRUE, args="--output=~/folder/subfolder")
check(manual = TRUE)
saveRDS(hs.sampling,'hs.sampling.rds')
data(hs.sampling)
hs.sampling <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.rds")
saveRDS(hs.ssh,'./data/hs.ssh.rds')
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
saveRDS(hs.ssh,'./data/hs.ssh.rds')
saveRDS(hs.ssh2,'./data/hs.ssh2.rds')
hs.ssh2 <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.ssh2.rds")
saveRDS(hs.reporting,'./data/hs.reporting.rds')
library(sandwich)
devtools::check(manual=TRUE)
devtools::check(manual=TRUE)
library(sandwich)
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
