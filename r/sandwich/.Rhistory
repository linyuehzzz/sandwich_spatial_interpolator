#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
data(hs.sampling)
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
write_rds(hs.reporting, file= file.path("./data", "hs.reporting.RData"))
library(tidyverse)
write_rds(hs.reporting, file= file.path("./data", "hs.reporting.RData"))
write_rds(hs.sampling, file= file.path("./data", "hs.sampling.RData"))
write_rds(hs.ssh, file= file.path("./data", "hs.ssh.RData"))
write_rds(hs.ssh2, file= file.path("./data", "hs.ssh2.RData"))
library(sandwich)
roxygen2::roxygenise()
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
data("hs.sampling")
data("hs.ssh")
data("hs.ssh2")
data("hs.reporting")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1))
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2))
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE))
roxygen2::roxygenise()
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
st_geometry_type(hs.ssh2)
st_geometry_type(hs.ssh2, FALSE)
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
st_crs(hs.ssh2)
st_crs(hs.ssh)
library(sandwich)
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
class(hs.join)
st_geometry_type(hs.ssh2, FALSE)
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
hs.join
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
hs.join = geodetector.data(hs.sampling, hs.ssh, "STR_1")
hs.join = geodetector.data(hs.join, hs.ssh2, "STR_2")
hs.join
geodetector.factor(hs.join, "Population", c("STR_1", "STR_2"))
devtools::load_all(".")
roxygen2::roxygenise()
library(sandwich)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
geodetector.interaction(hs.join, "Population", c("STR_1", "STR_2"))
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out
# mean
plot.mean(hs.out)
# standard error
plot.se(hs.out)
hs.out = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.out
# mean
plot.mean(hs.out)
# standard error
plot.se(hs.out)
sandwich.confint(object, level=.95)
sandwich.confint(hs.out, level=.95)
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
hs.sw.con = sandwich.confint(hs.sw, level=.95)
# confidence interval
plot.ci(hs.sw.con)
roxygen2::roxygenise()
library(sandwich)
devtools::build_manual()
devtools::build_manual()
library(sandwich)
library(sandwich)
R CMD Rd2pdf sandwich
build_manual(pkg = ".", path = NULL)
devtools::build_manual()
R CMD check
library(sandwich)
build_manual(path=getwd())
library(devtools)
build_manual(path=getwd())
check(manual = TRUE, args="--output=~/folder/subfolder")
check(manual = TRUE)
saveRDS(hs.sampling,'hs.sampling.rds')
data(hs.sampling)
hs.sampling <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.rds")
saveRDS(hs.ssh,'./data/hs.ssh.rds')
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
saveRDS(hs.ssh,'./data/hs.ssh.rds')
saveRDS(hs.ssh2,'./data/hs.ssh2.rds')
hs.ssh2 <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.ssh2.rds")
saveRDS(hs.reporting,'./data/hs.reporting.rds')
library(sandwich)
devtools::check(manual=TRUE)
devtools::check(manual=TRUE)
library(sandwich)
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::load_all(".")
library(sandwich)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
install.packages("foreach")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
library(caret)
install.packages("caret")
library(caret)
?createFolds
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
folds = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
data(oil)
createDataPartition(oilType, 2)
oilType
devtools::load_all(".")
folds = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
folds[1]
folds[2:9]
folds[,-1]
folds[-3]
split_up <- lapply(folds, function(ind, dat) dat[ind,], dat = hs.sampling)
split_up[1]
a=c(split_up[-2])
sandwich.cv(a, hs.ssh, hs.reporting, "Population")
class(split_up)
a=rbind(split_up[-2])
class(a)
as.frame(a)
as.data.frame(a)
a=as.data.frame(a)
a=split_up[-2]
a[1]
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population")
b=a[1]
b=as.data.frame(b)
c=as.data.frame(a[2])
d=rbind(b,c)
class(a[1])
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
warnings()
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
a=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
class(a)
class(1:6)
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
unlist(folds(a))
unlist(a)
b = unlist(a)
b=unlist(folds[-2])
b
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
folds[i]
folds[1]
unlist(folds[-1]
)
unique(unlist(folds[-1]))
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
hs.reporting <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.reporting.rds")
hs.ssh <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.ssh.rds")
hs.sampling <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.rds")
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
hs.sampling$index = 1:nrow(hs.sampling)
folds = createFolds(hs.sampling$index, k=10)
folds[1]
class(folds[1])
unique(unlist(folds[-1])
)
class(unique(unlist(folds[-i])))
class(unique(unlist(folds[-1])))
unique(unlist(folds[-1]))
list(unique(unlist(folds[-1]))))
list(unique(unlist(folds[-1])))
class(list(unique(unlist(folds[-1]))))
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
class(dev)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
class(dev)
st_as_sf(dev)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
class(dev)
sandwich.model(dev, hs.ssh, hs.reporting, "Population")
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
sampling.attr="Population"
rmse(dev[sampling.attr], dev$mean)
mean((dev[sampling.attr] - dev$mean)^2)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
dev
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
library(sandwich)
names(dev)[names(dev) == "mean"] <- "sepal_length"
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
colnames(folds)[1]
colnames(folds)[5]
names(folds)[5]
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
library(sandwich)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
list(dif)
devtools::load_all(".")
rmse=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
list(dif)^2
dif2= list(dif)
dif2= list(dif[1])
dif2= list(dif$Fold05.Population)
dif^2
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
dif2= list(dif$Fold05.Population)
dif2= list(dif$Fold05.Population)
class9list
class(dif)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
View(dif2)
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
new.attr.name = paste(names(folds)[5], "Population", sep=".")
dif2=dif[new.attr.name]
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
new.attr.name = paste(names(folds)[5], "Population", sep=".")
dif2=dif[new.attr.name]
dif2=dif[1]
list(dif2)
dif3=list(dif2)
dif3=list(dif2$Fold5.Population)
mean(dif3^2)
dif3^2
dif3=as.list(dif2)
dif3=as.list(dif2[1])
dif3=as.list(dif2$Fold5.Population)
dif3=as.list(dif2[new.attr.name])
dif3=as.list(dif2[0])
dif3=as.list(dif2[1])
devtools::load_all(".")
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=1)
dif=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
folds[5]
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
There were 25 warnings (use warnings() to see them)
new.attr.name = "Fold5.Population"
dif2=list(dif[new.attr.name])
devtools::load_all(".")
dev=sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population",k=5)
devtools::load_all(".")
dif2=list(dev[new.attr.name])
dif2=list(dev$"Fold5.Population")
dif2=list(dev$Fold5.Population)
dif2=list(dev[new.attr.name])
dif^2
dev$Fold5.Population
View(dev)
hs.reporting <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.reporting.rds")
hs.sampling <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.sampling.rds")
hs.ssh <- readRDS("C:/Yue/OneDrive - The Ohio State University/research/CAS-IREIS/2019-05 Sandwich a novel software for spatial interpolation of spatially stratified heterogeneous populations/Sandwich/r/sandwich/data/hs.ssh.rds")
devtools::load_all(".")
sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
out = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
devtools::load_all(".")
out = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
out2=out$Fold5.Population
new.attr.name="Fold5.Population"
out3=dif[[new.attr.name]]
out3=out[[new.attr.name]]
devtools::load_all(".")
out = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
devtools::load_all(".")
mse = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
devtools::load_all(".")
= sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
mse = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
devtools::load_all(".")
devtools::load_all(".")
rmse = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
hs.cv = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
hs.cv = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
hs.cv
library(sandwich)
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_manual()
