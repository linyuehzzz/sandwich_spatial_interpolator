data(meuse)
plot(meuse)
plot(variog(bc.sampling, option = "cloud", max.dist = 309.75))
library(rgdal)
library(tmap)
# Load precipitation data
z <- gzcon(url("http://colby.edu/~mgimond/Spatial/Data/precip.rds"))
P <- readRDS(z)
# Load Texas boudary map
z <- gzcon(url("http://colby.edu/~mgimond/Spatial/Data/texas.rds"))
W <- readRDS(z)
# Replace point boundary extent with that of Texas
P@bbox <- W@bbox
tm_shape(W) + tm_polygons() +
tm_shape(P) +
tm_dots(col="Precip_in", palette = "RdBu", auto.palette.mapping = FALSE,
title="Sampled precipitation \n(in inches)", size=0.7) +
tm_text("Precip_in", just="left", xmod=.5, size = 0.7) +
tm_legend(legend.outside=TRUE)
library(spatstat)  # Used for the dirichlet tessellation function
library(maptools)  # Used for conversion from SPDF to ppp
library(raster)    # Used to clip out thiessen polygons
# Create a tessellated surface
th  <-  as(dirichlet(as.ppp(P)), "SpatialPolygons")
# The dirichlet function does not carry over projection information
# requiring that this information be added manually
proj4string(th) <- proj4string(P)
# The tessellated surface does not store attribute information
# from the point data layer. We'll use the over() function (from the sp
# package) to join the point attributes to the tesselated surface via
# a spatial join. The over() function creates a dataframe that will need to
# be added to the `th` object thus creating a SpatialPolygonsDataFrame object
th.z     <- over(th, P, fn=mean)
th.spdf  <-  SpatialPolygonsDataFrame(th, th.z)
# Finally, we'll clip the tessellated  surface to the Texas boundaries
th.clp   <- raster::intersect(W,th.spdf)
# Map the data
tm_shape(th.clp) +
tm_polygons(col="Precip_in", palette="RdBu", auto.palette.mapping=FALSE,
title="Predicted precipitation \n(in inches)") +
tm_legend(legend.outside=TRUE)
library(sp)
data(meuse)
coordinates(meuse) <- ~x+y
m <- vgm(.59, "Sph", 874, .04)
library(gstat)
m <- vgm(.59, "Sph", 874, .04)
cv.o=krige.cv(ltpb ~ 1, meuse.pb, model=m.ltpb.f, nfold=nrow(meuse.pb),
verbose=FALSE)
plot(v.ltpb.c <- variogram(ltpb ~ 1, data=meuse, cutoff=1800, cloud=T))
meuse.pb <- cbind(meuse.pb,
ltpb = log10(meuse.pb$lead),
ltom = log10(meuse.pb$om),
ltzn = log10(meuse.pb$zinc))
str(meuse.pb)
devtools::load_all(".")
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# sampling layer
ggplot(data=hs.sampling) + geom_sf(aes(color=Population)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1)) + labs(fill="Code") +
ggtitle("SSH Layer A") + theme(plot.title=element_text(hjust=0.5))
# another SSH layer
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2)) + labs(fill="Code") +
ggtitle("SSH Layer B") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
hs.join = ssh.data(hs.sampling, hs.ssh, "STR_1")
hs.join = ssh.data(hs.join, hs.ssh2, "STR_2")
hs.join
geodetector.factor(hs.join, "Population", c("STR_1", "STR_2"))
geodetector.interaction(hs.join, "Population", c("STR_1", "STR_2"))
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
# mean
plot.mean(hs.sw)
# standard error
plot.se(hs.sw)
plot.ci(hs.sw.con)
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
.Last.error.trace
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# sampling layer
ggplot(data=hs.sampling) + geom_sf(aes(color=Population)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1)) + labs(fill="Code") +
ggtitle("SSH Layer A") + theme(plot.title=element_text(hjust=0.5))
# another SSH layer
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2)) + labs(fill="Code") +
ggtitle("SSH Layer B") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
hs.join = ssh.data(hs.sampling, hs.ssh, "STR_1")
hs.join = ssh.data(hs.join, hs.ssh2, "STR_2")
hs.join
geodetector.factor(hs.join, "Population", c("STR_1", "STR_2"))
geodetector.interaction(hs.join, "Population", c("STR_1", "STR_2"))
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
# mean
plot.mean(hs.sw)
# standard error
plot.se(hs.sw)
hs.sw.con = sandwich.confint(hs.sw, level=.95)
hs.sw.con
plot.ci(hs.sw.con)
hs.cv = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
hs.cv
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
devtools::load_all(".")
devtools::build_vignettes()
library(sandwich)
devtools::build_vignettes()
roxygen2::roxygenise()
library(sandwich)
devtools::build_manual()
roxygen2::roxygenise()
library(sandwich)
devtools::build_vignettes()
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenise()
devtools::build_vignettes()
devtools::build_vignettes()
library(sandwich)
devtools::build_vignettes()
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# sampling layer
ggplot(data=hs.sampling) + geom_sf(aes(color=Population)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1)) + labs(fill="Code") +
ggtitle("SSH Layer A") + theme(plot.title=element_text(hjust=0.5))
# another SSH layer
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2)) + labs(fill="Code") +
ggtitle("SSH Layer B") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
hs.join = ssh.data(hs.sampling, hs.ssh, "STR_1")
hs.join = ssh.data(hs.join, hs.ssh2, "STR_2")
hs.join
ssh.test(hs.join, "Population", c("STR_1", "STR_2"), test="factor")
ssh.test(hs.join, "Population", c("STR_1", "STR_2"), test="interaction")
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
# mean
plot.mean(hs.sw)
# standard error
plot.se(hs.sw)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
hs.sampling = load.shp("./data", "hs.sampling.shapefile")
hs.ssh = load.shp("./data", "hs.ssh.shapefile")
# here's another candidate SSH layer
hs.ssh2 = load.shp("./data", "hs.ssh2.shapefile")
hs.reporting = load.shp("./data", "hs.reporting.shapefile")
# sampling layer
ggplot(data=hs.sampling) + geom_sf(aes(color=Population)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=hs.ssh) + geom_sf(aes(fill=STR_1)) + labs(fill="Code") +
ggtitle("SSH Layer A") + theme(plot.title=element_text(hjust=0.5))
# another SSH layer
ggplot(data=hs.ssh2) + geom_sf(aes(fill=STR_2)) + labs(fill="Code") +
ggtitle("SSH Layer B") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=hs.reporting) + geom_sf(aes(fill=CODE)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
hs.join = ssh.data(hs.sampling, hs.ssh, "STR_1")
hs.join = ssh.data(hs.join, hs.ssh2, "STR_2")
hs.join
ssh.test(hs.join, "Population", c("STR_1", "STR_2"), test="factor")
ssh.test(hs.join, "Population", c("STR_1", "STR_2"), test="interaction")
hs.sw = sandwich.model(hs.sampling, hs.ssh, hs.reporting, "Population")
hs.sw
# mean
plot.mean(hs.sw)
# standard error
plot.se(hs.sw)
hs.sw.ci = sandwich.ci(hs.sw, level=.95)
hs.sw.ci
plot.ci(hs.sw.ci)
hs.cv = sandwich.cv(hs.sampling, hs.ssh, hs.reporting, "Population", k=5)
hs.cv
roxygen2::roxygenise()
library(sandwich)
devtools::build_manual()
devtools::build_vignettes()
.Last.error.trace
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
library(sandwich)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
library(sandwich)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
bc.ssh = read_sf("./data", "bc.ssh")
.bc.ssh = read_sf("./data", "bc_ssh")
bc.ssh = read_sf("./data", "bc_ssh")
View(bc.ssh)
save(bc.ssh, file = "bc.ssh.RData")
save(bc.ssh, file = "./data/bc.ssh.RData")
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# install.packages("sandwich")
library("sandwich")
bc.sampling = load.shp("./data", "bc_sampling")
bc.ssh = load.shp("./data", "bc_ssh")
bc.reporting = load.shp("./data", "bc_reporting")
# sampling layer
ggplot(data=bc.sampling) + geom_sf(aes(color=Population)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=bc.ssh) + geom_sf(aes(fill=STR_1)) + labs(fill="Code") +
ggtitle("SSH Layer") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=bc.reporting) + geom_sf(aes(fill=CODE)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
# sampling layer
ggplot(data=bc.sampling) + geom_sf(aes(color=Incidence_)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=bc.ssh) + geom_sf(aes(fill=Urban_Clas)) + labs(fill="Code") +
ggtitle("SSH Layer") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=bc.reporting) + geom_sf(aes(fill=OBJECTID)) + labs(fill="Code") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
devtools::load_all(".")
ggplot(data=bc.sampling) + geom_sf(aes(color=Incidence_)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
bc.ssh = read_sf("./data", "bc_ssh")
save(bc.ssh, file = "./data/bc.ssh.RData")
bc.sampling = read_sf("./data", "bc_sampling")
save(bc.sampling, file = "./data/bc.sampling.RData")
bc.reporting = read_sf("./data", "bc_reporting")
save(bc.reporting, file = "./data/bc.reporting.RData")
# sampling layer
ggplot(data=bc.sampling) + geom_sf(aes(color=Incidence)) +
ggtitle("Sampling Layer") + theme(plot.title=element_text(hjust=0.5))
# SSH layer
ggplot(data=bc.ssh) + geom_sf(aes(fill=Class)) + labs(fill="Urbanization Class") +
ggtitle("SSH Layer") + theme(plot.title=element_text(hjust=0.5))
# reporting layer
ggplot(data=bc.reporting) + geom_sf(aes(fill=OBJECTID)) + labs(fill="Unit ID") +
ggtitle("Reporting Layer") + theme(plot.title=element_text(hjust=0.5))
bc.join = ssh.data(bc.sampling, bc.ssh, "Class")
bc.join
ssh.test(bc.join, "Population", "Class", test="factor")
ssh.test(bc.join, "Incidence", "Class", test="factor")
ssh.test(hs.join, "Population", c("STR_1", "STR_2"), test="interaction")
bc.sw = sandwich.model(bc.sampling, bc.ssh, bc.reporting, "Incidence")
bc.sw
# mean
plot.mean(bc.sw)
# standard error
plot.se(bc.sw)
bc.sw.ci = sandwich.ci(bc.sw, level=.95)
bc.sw.ci
devtools::load_all(".")
bc.sw = sandwich.model(bc.sampling, bc.ssh, bc.reporting, "Incidence")
View(bc.sw)
bc.sw$mean
bc.sw$se
devtools::load_all(".")
bc.sw = sandwich.model(bc.sampling, bc.ssh, bc.reporting, "Incidence")
bc.sw$se
bc.sw$mean
devtools::build_vignettes()
devtools::load_all(".")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
library(sandwich)
devtools::build_vignettes()
library(rgdal)
library(sp)
library(sandwich)
bc.sampling = load.shp("./data", "bc_sampling")
bc.ssh = load.shp("./data", "bc_ssh")
bc.reporting = load.shp("./data", "bc_reporting")
bc.join = ssh.data(bc.sampling, bc.ssh, "Class")
bc.sw = sandwich.model(bc.sampling, bc.ssh, bc.reporting, "Incidence")
bc.sw.ci = sandwich.ci(bc.sw, level=.95)
save(bc.sw.ci, "./data/bc.sw.ci.RData")
save(bc.sw.ci, "bc.sw.ci.RData")
save(bc.sw.ci, "bc.sw.RData")
save(bc.sw.ci, file = "bc.sw.ci.RData")
rgdal::writeOGR(bc.sw.ci, "./data", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, "", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, "data", "bc.sw.ci", driver = "ESRI Shapefile")
rgdal::writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
library(rgdal)
writeOGR(bc.sw.ci, dsn ="./data", layer = "bc.sw.ci", driver = "ESRI Shapefile")
library(raster)
library(sf)
st_write(bc.sw.ci, "./data/nc.shp"))
st_write(bc.sw.ci, "./data/nc.shp")
st_write(bc.sw.ci, "./data/bc.sw.ci.shp")
devtools::load_all(".")
load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
devtools::load_all(".")
devtools::load_all(".")
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.outut = sandwich.model(hs.data, 'Population', type="shp")
hs.data[0]
hs.data
hs.data[[0]]
hs.data[[1]]
devtools::load_all(".")
hs.output = sandwich.model(hs.data, 'Population', type="shp")
devtools::load_all(".")
hs.data = load.shp('./data', 'hs.sampling.shapefile', 'hs.ssh.shapefile', 'hs.reporting.shapefile')
hs.sw = sandwich.model(hs.data, 'Population', type="shp")
hs.sw.ci = sandwich.ci(hs.sw, .95, "shp")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, 'Population', k=5, type="shp")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
devtools::load_all(".")
hs.cv = sandwich.cv(hs.data, sampling.attr='Population', k=5, type="shp")
devtools::load_all(".")
roxygen2::roxygenise()
devtools::load_all(".")
load.data.txt("./data/bc_sampling_ssh", "./data/bc_reporting_ssh")
bc.data = read.delim("./data/bc_sampling_ssh", sep=",")
load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
"SSHID" %in% names(bc.data[[1]])
list(c(1,2), c("w1", "w2"))
c(1,"SSHID") %in% names(bc.data[[1]])
c(1,"SSHID") %in% names(bc.data[[1]]) ==FALSE
all(c(1,"SSHID") %in% names(bc.data[[1]]))
NULL %in% names(bc.data[[1]])
! all(c(1,"SSHID") %in% names(bc.data[[1]]))
c(1,2) %in% bc.data[[1]]$SSHID
c(1,2) %in% bc.data[[1]]["SSHID"]
bc.data[[1]]["SSHID"]
1 %in% bc.data[[1]]["SSHID"]
bc.data[[1]]$SSHID
1 %in% bc.data[[1]][["SSHID"]]
unique(bc.data[[1]][["SSHID"]])
length(unique(bc.data[[1]][["SSHID"]]))
unique(sampling_ssh[ssh.id.col])
unique(bc.data[[1]]["SSHID"])
unique(bc.data[[1]]["SSHID"])[1,]
unique(bc.data[[1]]["SSHID"])[2,]
bc.data[bc.data[["SSHID"]]==unique(bc.data[[1]]["SSHID"])[1,],]
bc.data[bc.data[["SSHID"]]==unique(bc.data[[1]]["SSHID"])[1,],]
unique(bc.data[[1]]["SSHID"])[1,]
type(unique(bc.data[[1]]["SSHID"])[1,])
class(unique(bc.data[[1]]["SSHID"])[1,])
bc.data[bc.data[["SSHID"]]==1,]
bc.data[bc.data$SSHID==1,]
bc.data[bc.data$SSHID==1]
bc.data[[1]][bc.data[[1]]$SSHID==1,]
bc.data[[1]][bc.data[[1]]$SSHID==unique(bc.data[[1]]["SSHID"])[1,],]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[1]][bc.data[[1]]$SSHID==2,]
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,3), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
View(bc.output)
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[1]]$SSHID==2
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
View(bc.output)
bc.output[2,]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", type="txt", ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
bc.data[[2]]
bc.data[[2]][1,]
ssh.weights=list(c(1,2), c("W1","W2"))
ssh.weights[[2]]
ssh.weights[[2]][1]
which(bc.output[["SSHID"]] ==1)
which(bc.output[["SSHID"]] ==2)
ssh.weights[[2]][1]
ssh.weights[[1]][1]
which(bc.output[["SSHID"]] ==ssh.weights[[1]][1])
ssh.weights[[1]]
ssh.weights[[1]]
sorted(ssh.weights[[1]]) == sorted(unique(bc.data[[1]][["SSHID"]]))
sort(ssh.weights[[1]]) == sort(unique(bc.data[[1]][["SSHID"]]))
bc.data[[2]][[ssh.weights[[2]][1]]]
bc.data[[2]][1,][[ssh.weights[[2]][1]]]
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
View(bc.output)
devtools::load_all(".")
bc.output = sandwich.model(bc.data, "Incidence", "txt", "SSHID", list(c(1,2), c("W1","W2")))
roxygen2::roxygenise()
devtools::load_all(".")
bc.sw.ci = sandwich.ci(bc.output)
roxygen2::roxygenise()
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GDCODE", all.x = TRUE)
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GBCODE", all.x = TRUE)
View(bc.data)
devtools::load_all(".")
devtools::load_all(".")
load.data.txt("./data/bc_sampling_ssh.csv", "bc_reporting_ssh.csv")
load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
read.delim("./data/bc_reporting_ssh.csv", sep=",", check.names=FALSE)
read.csv("./data/bc_reporting_ssh.csv", sep=",", check.names=FALSE)
read.csv("./data/bc_reporting_ssh.csv", sep=",", fileEncoding = "UTF-8-BOM")
devtools::load_all(".")
bc.data = load.data.txt("./data/bc_sampling_ssh.csv", "./data/bc_reporting_ssh.csv")
View(bc.output)
merge(x = bc.data[[1]], y = bc.data[[2]], by = "GBCODE", all.x = TRUE)
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
devtools::load_all(".")
bc.cv = sandwich.cv(bc.data, "Incidence", k=5, type="txt", "SSHID", "GBCODE", list(c(1,2), c("W1", "W2")))
roxygen2::roxygenise()
devtools::build_manual()
