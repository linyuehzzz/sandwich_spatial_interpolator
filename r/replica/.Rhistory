# install packages
if(FALSE){
install.packages("devtools")
}
library("devtools")
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.1")
remove.packages("glue", lib="~/R/win-library/4.1")
remove.packages("magrittr", lib="~/R/win-library/4.1")
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
+                          subdir="r/sandwichr", build_vignettes=TRUE)
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
install.packages("rlang")
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
install.packages("magrittr")
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
install.packages("glue")
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=TRUE)
devtools::install_github(repo="linyuehzzz/sandwich_spatial_interpolator",
subdir="r/sandwichr", build_vignettes=FALSE)
# import packages
library(sandwichr)
## -----------Case study 1------------------
# Loading data
hs.sampling.name <- system.file("extdata", "hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("extdata", "hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("extdata", "hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("extdata", "hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
(sandwichr)
(sandwichr)
# Importing packages
library(sandwichr)
library(sf)
library(tools)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("extdata", "hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
## Running the Sandwich model
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plotting
sandwich.plot.mean(object=hs.sw)
# Plotting
sandwich.plot.mean(object=hs.sw)
sandwich.plot.se(hs.sw)
sandwich.plot.ci(hs.sw.ci)
## Model validation
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
## Model validation
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
## Initializing the generator for pseudo random numbers
set.seed(0)
## Model validation
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
### -----------Case study 2------------------
## Loading data
bc.sampling_ssh.name <- system.file("extdata", "bc_sampling_ssh.csv",
package="sandwichr")
bc.reporting_ssh.name <- system.file("extdata", "bc_reporting_ssh.csv",
package="sandwichr")
bc.data <- load.data.txt(sampling_ssh.file=bc.sampling_ssh.name,
reporting_ssh.file=bc.reporting_ssh.name)
head(bc.data[[1]])    # Sampling-SSH
head(bc.data[[2]])    # Reporting-SSH
## Selecting SSH layers(s)
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor",
type="txt")
## Importing packages
library(sandwichr)
library(sf)
library(tools)
library(ggpubr)
library(dplyr)
# Visualizing urban-rural disparities
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank()) + labs(y="Breast Cancer Incidence (Rate per 100,000)")
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
## Running the model
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
## Running the model
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculating the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
## Model validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
head(hs.data)
hs.sampling.name
print(hs.sampling.name, hs.ssh.name, hs.reporting.name)
hs.sampling.name
hs.ssh.name
hs.reporting.name
head(hs.ssh2)
head(hs.data[[1]])
head(hs.data[[1]])
head(hs.data[[1]])
knitr::spin(“code.R”)
knitr::spin("code.R")
knitr::spin("code.R")
install.packages("markdown")
knitr::spin("code.R")
options(warn=-1)
# Calculating the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculating the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
### -----------4.2.3 Running the Sandwich model------------------
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
p + scale_x_discrete(labels=c("1"="Urban", "2"="Rural")) +
theme(axis.title.x=element_blank()) + labs(y="Breast Cancer Incidence\n(Rate per 100,000)")
knitr::spin("code.R")
knitr::spin("code.R")
knitr::spin("code.R")
knitr::spin("code.R")
