
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rsandwich"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "rsandwich-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('rsandwich')
Loading required package: sf
Warning: package 'sf' was built under R version 4.0.5
Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.0.5

Attaching package: 'rsandwich'

The following object is masked from 'package:base':

    q

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("hs")
> ### * hs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hs
> ### Title: Heshun human population dataset
> ### Aliases: hs
> 
> ### ** Examples
> 
> library(sf)
> library(ggplot2)
> data("hs.sampling")
> summary(hs.sampling$Population)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   20.0   119.5   250.0   233.0   329.0   474.0 
> ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("q")
> ### * q
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: q
> ### Title: Plot Sandwich estimates
> ### Aliases: q
> 
> ### ** Examples
> 
> library(sf)
> data("hs.sampling")
> data("hs.ssh")
> data("hs.reporting")
> sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Simple feature collection with 10 features and 7 fields
Geometry type: POLYGON
Dimension:     XY
Bounding box:  xmin: 151114.4 ymin: 4106864 xmax: 228423.6 ymax: 4165211
Projected CRS: WGS 84 / UTM zone 50N
# A tibble: 10 x 8
   CODE    NUM STDEV  Area Name                             geometry  mean    se
   <chr> <int> <int> <dbl> <chr>                       <POLYGON [m]> <dbl> <dbl>
 1 02       35   121 427.  <NA>  ((153690.1 4149820, 153647.4 41499~  243. 20.5 
 2 06       35   700 143.  <NA>  ((191225.5 4151326, 191387.6 41513~  295.  2.04
 3 03       72   281 373.  <NA>  ((178892 4151731, 179098.2 4151712~  351.  1.87
 4 05       22   197 252.  <NA>  ((172768 4143250, 172542.9 4143207~  194. 26.7 
 5 10       16   499  73.7 <NA>  ((207615.6 4147664, 207785.4 41474~  231.  6.48
 6 01       17   146 186.  <NA>  ((172768 4143250, 173154.8 4143172~  237. 21.3 
 7 09       29   298 181.  <NA>  ((211327.9 4137723, 211342.8 41377~  165.  7.01
 8 07       29   277 166.  <NA>  ((203063.2 4138768, 203180.8 41387~  135. 10.2 
 9 04       24   198 110.  <NA>  ((196857.7 4128908, 196887.1 41288~  347.  2.10
10 08       47   328 275.  <NA>  ((211247.7 4127401, 211596.7 41273~  171.  6.41
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("q", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sandwich")
> ### * sandwich
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sandwich
> ### Title: Perform Sandwich model-based mapping
> ### Aliases: sandwich
> 
> ### ** Examples
> 
> library(sf)
> # Load data
> data("hs.sampling")
> data("hs.ssh")
> data("hs.reporting")
> # Run Sandwich model
> sandwich(hs.sampling, hs.ssh, hs.reporting, "Population")
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Warning: attribute variables are assumed to be spatially constant throughout all geometries
Simple feature collection with 10 features and 7 fields
Geometry type: POLYGON
Dimension:     XY
Bounding box:  xmin: 151114.4 ymin: 4106864 xmax: 228423.6 ymax: 4165211
Projected CRS: WGS 84 / UTM zone 50N
# A tibble: 10 x 8
   CODE    NUM STDEV  Area Name                             geometry  mean    se
   <chr> <int> <int> <dbl> <chr>                       <POLYGON [m]> <dbl> <dbl>
 1 02       35   121 427.  <NA>  ((153690.1 4149820, 153647.4 41499~  243. 20.5 
 2 06       35   700 143.  <NA>  ((191225.5 4151326, 191387.6 41513~  295.  2.04
 3 03       72   281 373.  <NA>  ((178892 4151731, 179098.2 4151712~  351.  1.87
 4 05       22   197 252.  <NA>  ((172768 4143250, 172542.9 4143207~  194. 26.7 
 5 10       16   499  73.7 <NA>  ((207615.6 4147664, 207785.4 41474~  231.  6.48
 6 01       17   146 186.  <NA>  ((172768 4143250, 173154.8 4143172~  237. 21.3 
 7 09       29   298 181.  <NA>  ((211327.9 4137723, 211342.8 41377~  165.  7.01
 8 07       29   277 166.  <NA>  ((203063.2 4138768, 203180.8 41387~  135. 10.2 
 9 04       24   198 110.  <NA>  ((196857.7 4128908, 196887.1 41288~  347.  2.10
10 08       47   328 275.  <NA>  ((211247.7 4127401, 211596.7 41273~  171.  6.41
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sandwich", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.72 0.35 8.21 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
