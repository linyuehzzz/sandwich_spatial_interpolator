hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
autoplot(object=hs.sw.ci)
# Perform k-fold cross validation
set.seed(0)
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.data
devtools::load_all(".")
# Perform k-fold cross validation
set.seed(0)
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.sampling_ssh.name <- system.file("extdata", "bc_sampling_ssh.csv",
package="sandwichr")
bc.reporting_ssh.name <- system.file("extdata", "bc_reporting_ssh.csv",
package="sandwichr")
bc.data <- load.data.txt(sampling_ssh.file=bc.sampling_ssh.name,
reporting_ssh.file=bc.reporting_ssh.name)
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
library(ggpubr)
library(dplyr)
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank()) + labs(y="Breast Cancer Incidence (Rate per 100,000)")
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
set.seed(0)
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
devtools::load_all(".")
# Perform k-fold cross validation
set.seed(0)
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
library(sandwichr)
devtools::build_vignettes()
.Last.error.trace
devtools::document()
devtools::build_manual()
devtools::build()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install the sandwichr package
# require("devtools")
# devtools::install_github("linyuehzzz/sandwich_spatial_interpolator",
#                          subdir="r/sandwichr", build_vignettes = TRUE)
# Import the sandwichr package
library("sandwichr")
# Input data from shapefiles
hs.sampling.name <- system.file("extdata", "hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("extdata", "hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("extdata", "hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
library(sf)
library(tools)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("extdata", "hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the estimated mean values and standard errors
autoplot(object=hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
autoplot(object=hs.sw.ci)
# Perform k-fold cross validation
set.seed(0)
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.sampling_ssh.name <- system.file("extdata", "bc_sampling_ssh.csv",
package="sandwichr")
bc.reporting_ssh.name <- system.file("extdata", "bc_reporting_ssh.csv",
package="sandwichr")
bc.data <- load.data.txt(sampling_ssh.file=bc.sampling_ssh.name,
reporting_ssh.file=bc.reporting_ssh.name)
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
library(ggpubr)
library(dplyr)
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank()) + labs(y="Breast Cancer Incidence (Rate per 100,000)")
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
set.seed(0)
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
library(sandwichr)
library(sandwichr)
autoplot(object=hs.sw)
ggplot2::autoplot(object=hs.sw)
library(sandwichr)
devtools::build_vignettes()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::check_win_devel()
devtools::build_vignettes()
head(bc.sw.ci$object)
head(bc.sw.ci$object$object)
devtools::build_vignettes()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
devtools::build_manual()
devtools::build_manual()
summary(hs.sw$object)
summary(hs.sw$object$se)
devtools::build_manual()
summary(hs.sw)
devtools::load_all(".")
summary(hs.sw$object$se)
summary(hs.sw)
devtools::load_all(".")
summary(hs.sw)
summary(hs.sw.ci)
devtools::load_all(".")
summary(hs.sw.ci)
devtools::build_manual()
devtools::build_vignettes()
devtools::build_manual()
devtools::build_vignettes()
devtools::load_all(".")
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
summary(object=hs.sw)
hs.sw
devtools::load_all(".")
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
summary(object=hs.sw)
devtools::load_all(".")
summary(object=hs.sw)
devtools::build_manual()
devtools::build_vignettes()
options(warn=-1)
### -----------4.1.1 Installing packages------------------
if(FALSE){
install.packages("devtools")
install.packages("sf")
install.packages("tools")
install.packages("ggpubr")
install.packages("dplyr")
}
### -----------4.1.2 Importing packages------------------
library(sandwichr)
library(sf)
library(tools)
library(ggpubr)
library(dplyr)
library(dplyr)
## Initializing the generator for pseudo random numbers
set.seed(0)
### -----------4.2.1 Loading data------------------
hs.sampling.name <- system.file("extdata", "hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("extdata", "hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("extdata", "hs.reporting.shapefile.shp",
package="sandwichr")
hs.sampling.name
hs.ssh.name
hs.reporting.name
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Sampling
head(hs.data[[1]])
# SSH
head(hs.data[[2]])
# Reporting
head(hs.data[[3]])
### -----------4.2.2 Selecting SSH layers(s)------------------
# Inputing another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("extdata", "hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
head(hs.ssh2)
# Preparing the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculating the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculating the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
### -----------4.2.3 Running the Sandwich model------------------
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
head(hs.sw$object)
summary(hs.sw)
# Calculating the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci$object$object)
summary(hs.sw.ci)
### -----------4.2.4 Model validation------------------
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
### -----------4.3.1 Loading data------------------
bc.sampling_ssh.name <- system.file("extdata", "bc_sampling_ssh.csv",
package="sandwichr")
bc.reporting_ssh.name <- system.file("extdata", "bc_reporting_ssh.csv",
package="sandwichr")
bc.sampling_ssh.name
bc.reporting_ssh.name
bc.data <- load.data.txt(sampling_ssh.file=bc.sampling_ssh.name,
reporting_ssh.file=bc.reporting_ssh.name)
head(bc.data[[1]])    # Sampling-SSH
head(bc.data[[2]])    # Reporting-SSH
### -----------4.3.2 Selecting SSH layers(s)------------------
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculating the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
# Visualizing urban-rural disparities
p <- ggerrorplot(bc.data[[1]], x="SSHID", y="Incidence",
desc_stat="mean_sd", color="black",
add="violin", add.params=list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1"="Urban", "2"="Rural")) +
theme(axis.title.x=element_blank()) + labs(y="Breast Cancer Incidence\n(Rate per 100,000)")
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
### -----------4.3.3 Running the model------------------
# Performing the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
### -----------4.3.3 Running the model------------------
# Performing the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw$object)
summary(bc.sw)
# Calculating the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci$object$object)
head(bc.sw.ci$object$object)
summary(bc.sw.ci)
### -----------4.3.4 Model validation------------------
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
knitr::spin("code.R")
knitr::spin("code.R")
knitr::spin("code.R")
devtools::release()
devtools::build_manual()
devtools::build_manual()
devtools::release()
browseVignettes("sandwichr")
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::load_all(".")
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build()
devtools::release()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::release()
knitr::spin("code.R")
devtools::build_vignettes()
install.packages("devtools")
devtools::build_vignettes()
update.packages()
update.packages()
devtools::build_vignettes()
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
install.packages(c("digest", "dplyr", "magrittr", "Matrix", "plyr", "purrr", "stringi", "tibble"))
remove.packages("tibble", lib="~/R/win-library/4.1")
install.packages("tibble")
install.packages("tibble")
devtools::build_vignettes()
devtools::load_all()
devtools::document()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
y <- rep(c(letters[1:4]), each = 5)
create_folds(y)
import(caret)
library(caret)
create_folds(y)
createFolds(y)
summary(y)
y
createFolds(y, k = 2)
y <- rep(c(letters[1:4]), each = 6)
createFolds(y, k = 2)
x = createFolds(y, k = 2)
x$Fold1
devtools::load_all()
devtools::build()
devtools::build_vignettes()
devtools::load_all()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
join = st_join(hs.data[[1]], hs.data[[2]])
ssh.id.col = "STR_2"
createFolds(join[ssh.id.col], k=5)
hs.data[[2]]
ssh.id.col = "STR_1"
createFolds(join[ssh.id.col], k=5)
join[ssh.id.col]
st_join(hs.data[[1]], hs.data[[2]])
join[ssh.id.col]
join[[ssh.id.col]]
createFolds(join[[ssh.id.col]], k=5)
devtools::build()
devtools::build()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
hs.dists <- as.matrix(dist(cbind(hs.data[[1]]$x, hs.data[[1]]$y)))
hs.dists.inv <- 1/hs.dists
diag(hs.dists.inv) <- 0
Moran.I(hs$Population, hs.dists.inv)
# Import the sandwichr package and other packages
library("sandwichr")
library(ggplot2)
library(ggpubr)
library(dplyr)
library(ape)
# Input data from shapefiles
hs.sampling.name <- system.file("extdata", "hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("extdata", "hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("extdata", "hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Sampling
head(hs.data[[1]])
class(hs.data[[1]])
attributes(hs.data[[1]])
# SSH
head(hs.data[[2]])
class(hs.data[[2]])
attributes(hs.data[[2]])
# Reporting
head(hs.data[[3]])
class(hs.data[[3]])
attributes(hs.data[[3]])
hs.dists <- as.matrix(dist(cbind(hs.data[[1]]$x, hs.data[[1]]$y)))
hs.dists.inv <- 1/hs.dists
diag(hs.dists.inv) <- 0
Moran.I(hs$Population, hs.dists.inv)
hs.dists <- as.matrix(dist(cbind(hs.data[[1]]$x, hs.data[[1]]$y)))
hs.dists.inv <- 1/hs.dists
diag(hs.dists.inv) <- 0
Moran.I(hs.data[[1]]$Population, hs.dists.inv)
devtools::build()
devtools::build()
devtools::build()
bc.dists <- as.matrix(dist(cbind(bc.data[[1]]$X, bc.data[[1]]$Y)))
bc.dists.inv <- 1/bc.dists
diag(bc.dists.inv) <- 0
Moran.I(bc.data[[1]]$Incidence, bc.dists.inv)
devtools::build()
devtools::build_vignettes()
qqnorm(hs.data[[1]]$Population, pch = 1, frame = FALSE)
qqline(hs.data[[1]]$Population, col = "steelblue", lwd = 2)
# Import the sandwichr package and other packages
library("sandwichr")
library(ggplot2)
library(ggpubr)
library(dplyr)
library(ape)
library(car)
qqPlot(hs.data[[1]]$Population)
qqnorm(hs.data[[1]]$Population, pch = 1, frame = FALSE)
qqline(hs.data[[1]]$Population, col = "steelblue", lwd = 2)
qqnorm(bc.data[[1]]$Incidence, pch = 1, frame = FALSE)
qqline(bc.data[[1]]$Incidence, col = "steelblue", lwd = 2)
devtools::build_vignettes()
devtools::build_vignettes()
qqnorm(hs.data[[1]]$Population, pch = 1, frame = FALSE)
qqline(hs.data[[1]]$Population, col = "steelblue", lwd = 2)
qqPlot(hs.data[[1]]$Population)
qqnorm(bc.data[[1]]$Incidence, pch = 1, frame = FALSE)
qqline(bc.data[[1]]$Incidence, col = "steelblue", lwd = 2)
qqnorm(hs.data[[1]]$Population, pch=1, frame=FALSE)
qqline(hs.data[[1]]$Population, col="steelblue", lwd=2)
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
bc.data[[1]] %>%
group_by(SSHID)
hs.sw$object
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise(mean=mean(Incidence), sd=sd(), n=n())
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise(mean=mean(Incidence), sd=sd(Incidence), n=n())
8.07*8.07/125
5.12*5.12/117
roxygen2::roxygenise()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build_manual()
rlang::last_error()
devtools::build()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::release()
devtools::document()
devtools::build()
devtools::check()
devtools::release()
