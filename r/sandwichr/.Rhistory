bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
library(ggpubr)
library(dplyr)
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank())
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
devtools::build_vignettes()
range(hs.sw.ci$mean)
mean(hs.sw.ci$se)
mean(hs.sw.ci$ci.up - hs.sw.ci$ci.low)
mean(hs.sw.ci$ci.up - hs.sw.ci$ci.low)/2
range(bc.sw.ci$mean)
mean(hs.sw.ci$se)
mean(bc.sw.ci$se)
max(bc.sw.ci$se)
mean(bc.sw.ci$ci.up - bc.sw.ci$ci.low)/2
write.csv(bc.sw.ci,"bc.sw.ci.csv")
devtools::build_vignettes()
View(bc.sw)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Input another candidate SSH layer for demonstration
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the mean values of the interpolation estimates
plot.mean(object=hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(object=hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
plot.ci(object=hs.sw.ci)
# Perform k-fold cross validation
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
library(ggpubr)
library(dplyr)
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank())
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
sf::st_write(obj = hs.sw.ci, dsn = "hs.sw.ci.shp")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
#'
#' @import sf
#' @docType data
#' @name hs
#' @examples
#' library(sf)
#' library(ggplot2)
#' data("hs.sampling")
#' summary(hs.sampling$Population)
#' ggplot(data=hs.sampling) + geom_sf(aes(color=Population))
NULL
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install sandwich package
# install.packages("sandwich")
# Import sandwich package
library("sandwich")
# Input data from shapefiles
hs.data <- load.data.shp(path="./data", sampling.file="hs.sampling.shapefile",
ssh.file="hs.ssh.shapefile", reporting.file="hs.reporting.shapefile")
# Input another candidate SSH layer for demonstration
hs.ssh2 <- read_sf(dsn="./data", layer="hs.ssh2.shapefile")
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the mean values of the interpolation estimates
plot.mean(object=hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(object=hs.sw)
# Calculate the confidence intervals of the interpolation estimates
hs.sw.ci <- sandwich.ci(object=hs.sw, level=.95)
head(hs.sw.ci)
# Plot the confidence intervals of the interpolation estimates
plot.ci(object=hs.sw.ci)
# Perform k-fold cross validation
hs.cv <- sandwich.cv(object=hs.data, sampling.attr="Population", k=5, type="shp")
hs.cv
# Input data from text files
bc.data <- load.data.txt(sampling_ssh.file="./data/bc_sampling_ssh.csv",
reporting_ssh.file="./data/bc_reporting_ssh.csv")
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
# Prepare the SSH layer for evaluation
bc.join <- ssh.data.txt(object=bc.data)
head(bc.join)
# Calculate the geographical detector q-statistic
ssh.test(object=bc.join, y="Incidence", x="SSHID", test="factor", type="txt")
library(ggpubr)
library(dplyr)
p = ggerrorplot(bc.data[[1]], x = "SSHID", y = "Incidence",
desc_stat = "mean_sd", color = "black",
add = "violin", add.params = list(color = "darkgray")
)
p + scale_x_discrete(labels=c("1" = "Urban", "2" = "Rural")) +
theme(axis.title.x = element_blank())
bc.data[[1]] %>%
group_by(SSHID) %>%
summarise_at(vars(Incidence),
list(name = mean))
# Perform the SSH based spatial interpolation
bc.sw <- sandwich.model(object=bc.data, sampling.attr="Incidence", type="txt",
ssh.id.col="SSHID", ssh.weights=list(c(1,2), c("W1","W2")))
head(bc.sw)
# Calculate the confidence intervals of the interpolation estimates
bc.sw.ci <- sandwich.ci(object=bc.sw, level=.95)
head(bc.sw.ci)
# Perform k-fold cross validation
bc.cv <- sandwich.cv(object=bc.data, sampling.attr="Incidence", k=5, type="txt",
ssh.id.col="SSHID", reporting.id.col="GBCODE",
ssh.weights=list(c(1,2), c("W1","W2")))
bc.cv
range(hs.sw.ci$mean)
mean(hs.sw.ci$se)
mean(hs.sw.ci$ci.up-hs.sw.ci$ci.low)/2
sf::st_write(obj = hs.sw.ci, dsn = "hs.sw.ci.shp")
R CMD check
roxygen2::roxygenise()
devtools::build_manual()
devtools::load_all(".")
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::build_manual()
devtools::release()
devtools::build_vignettes()
install.packages("badgecreatr")
usethis::use_readme_md()
usethis::use_readme_rmd()
usethis::use_badge()
help(use_badge
)
library
usethis::use_lifecycle_badge("stable")
usethis::use_lifecycle_badge("stable")
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
use_github_actions()
usethis::use_github_actions()
use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
usethis::use_github_actions()
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
install.packages("devtools")
vignette(package="Sandwich")
devtools::load_all(".")
vignette(package="Sandwich")
browseVignettes("Sandwich")
browseManual("Sandwich")
library(ellipsis)
remove.packages("ellipsis", lib="~/R/win-library/4.0")
iinstall.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
library(ellipsis)
library(ellipsis)
install.packages("ellipsis")
install.packages("ellipsis")
library(Sandwich)
install.packages("rlang")
library(sf)
fname <- system.file("shape/nc.shp", package="sf")
fname <- system.file("data/bc_sampling_ssh.csv", package="Sandwich")
dirname(fname)
file_path_sans_ext(basename(fname))
library(tools)
file_path_sans_ext(basename(fname))
library(Sandwich)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install Sandwich package
# install.packages("devtools")
devtools::install_github("linyuehzzz/sandwich_spatial_interpolator",
subdir="r/Sandwich")
# Import Sandwich package
library("Sandwich")
# Input data from shapefiles
hs.sampling.name <- system.file("hs.sampling.shapefile.shp", package="Sandwich")
hs.ssh.name <- system.file("hs.ssh.shapefile.shp", package="Sandwich")
hs.reporting.name <- system.file("hs.reporting.shapefile.shp", package="Sandwich")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
hs.sampling.name <- system.file("hs.sampling.shapefile.shp", package="Sandwich")
hs.ssh.name <- system.file("hs.ssh.shapefile.shp", package="Sandwich")
hs.reporting.name <- system.file("hs.reporting.shapefile.shp", package="Sandwich")
hs.sampling.name <- system.file("hs.sampling.shapefile.shp", package="Sandwich")
devtools::load_all(".")
hs.sampling.name <- system.file("hs.sampling.shapefile.shp", package="Sandwich")
hs.ssh.name <- system.file("bc_reporting_ssh.csv", package="Sandwich")
hs.sampling.name <- system.file("data/hs.sampling.shapefile.shp", package="Sandwich")
hs.ssh.name <- system.file("data/hs.ssh.shapefile.shp", package="Sandwich")
hs.reporting.name <- system.file("data/hs.reporting.shapefile.shp", package="Sandwich")
# Input data from shapefiles
hs.sampling.name <- system.file("data/hs.sampling.shapefile.shp", package="Sandwich")
hs.ssh.name <- system.file("data/hs.ssh.shapefile.shp", package="Sandwich")
hs.reporting.name <- system.file("data/hs.reporting.shapefile.shp", package="Sandwich")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("data/hs.ssh2.shapefile.shp",
package="Sandwich")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the interaction detector
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="interaction")
# Perform the SSH based spatial interpolation
hs.sw <- sandwich.model(object=hs.data, sampling.attr="Population", type="shp")
head(hs.sw)
# Plot the mean values of the interpolation estimates
plot.mean(object=hs.sw)
# Plot the standard errors of the interpolation estimates
plot.se(object=hs.sw)
# Input data from text files
bc.sampling_ssh.name <- system.file("data/bc_sampling_ssh.csv",
package="Sandwich")
bc.reporting_ssh.name <- system.file("data/bc_reporting_ssh.csv",
package="Sandwich")
bc.data <- load.data.txt(sampling_ssh.file=bc.sampling_ssh.name,
reporting_ssh.file=bc.reporting_ssh.name)
# Sampling-SSH
head(bc.data[[1]])
# Reporting-SSH
head(bc.data[[2]])
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::build_manual()
library(Sandwich)
devtools::build_vignettes()
library(Sandwich)
roxygen2::roxygenise()
devtools::build_vignettes()
require(devtools)
use_readme_rmd()
use_github_links()
use_github_links()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
devtools::release()
install.packages("knitr")
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
rmarkdown::pandoc_version()
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
install.packages(c("blob", "broom", "cachem", "car", "credentials", "curl", "forestplot", "gargle", "gert", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "knitr", "lme4", "matrixStats", "meta", "mime", "openssl", "openxlsx", "packrat", "processx", "quantreg", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rio", "rsconnect", "Rttf2pt1", "rvest", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "statmod", "systemfonts", "testthat", "tinytex", "waldo", "xfun", "zip"))
devtools::check()
roxygen2::roxygenise()
devtools::build_manual()
devtools::check()
devtools::release()
library(sandwichr)
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_vignettes()
devtools::check()
devtools::release()
install.packages(c("dplyr", "ggpubr", "knitr"))
roxygen2::roxygenise()
install.packages(roxygen2)
install.packages("roxygen2")
installed.packages("sf")
install.packages("sf")
install.packages("geodetector")
install.packages("lwgeom")
library(sandwichr)
R CMD build --resave-data
install.packages("rmarkdown")
devtools::document()
install.packages("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
sandwich.
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
sandwich.plot.ci <- function(object){
#--------------------------- Check inputs ----------------------------------
if (!is.element("mean", names(object)) |
!is.element("se", names(object)) |
!is.element("df", names(object))){
stop("Should run the sandwich function first.")
}
#---------------- Plot Sandwich confidence intervals ----------------------
p1 = ggplot(data=object) + geom_sf(aes(fill=ci.low)) + labs(fill='Lower bound\nof C.I.') + ggtitle("Confidence Interval (Lower Bound)") + theme(plot.title=element_text(hjust=0.5)) + scale_fill_gradient(low = 'white', high = 'red')
p2 = ggplot(data=object) + geom_sf(aes(fill=ci.up)) + labs(fill='Upper bound\nof C.I.') + ggtitle("Confidence Interval (Upper Bound)") + theme(plot.title=element_text(hjust=0.5)) + scale_fill_gradient(low = 'white', high = 'red')
grid.arrange(p1, p2, nrow=1)
}
sandwich.plot.ci <- function(object){
#--------------------------- Check inputs ----------------------------------
if (!is.element("mean", names(object)) |
!is.element("se", names(object)) |
!is.element("df", names(object))){
stop("Should run the sandwich function first.")
}
#---------------- Plot Sandwich confidence intervals ----------------------
p1 = ggplot(data=object) + geom_sf(aes(fill=ci.low)) + labs(fill='Lower bound\nof C.I.') + ggtitle("Confidence Interval (Lower Bound)") + theme(plot.title=element_text(hjust=0.5)) + scale_fill_gradient(low = 'white', high = 'red')
p2 = ggplot(data=object) + geom_sf(aes(fill=ci.up)) + labs(fill='Upper bound\nof C.I.') + ggtitle("Confidence Interval (Upper Bound)") + theme(plot.title=element_text(hjust=0.5)) + scale_fill_gradient(low = 'white', high = 'red')
grid.arrange(p1, p2, nrow=1)
}
devtools::document()
rm(list = c("sandwich.plot.ci"))
devtools::document()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Install Sandwich package
# require("devtools")
# devtools::install_github("linyuehzzz/sandwich_spatial_interpolator",
#                          subdir="r/Sandwich", build_vignettes = TRUE)
# Import sandwichr package
library("sandwichr")
# Input data from shapefiles
hs.sampling.name <- system.file("data/hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("data/hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("data/hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("data/hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Import sandwichr package
library("sandwichr")
# Input data from shapefiles
hs.sampling.name <- system.file("data/hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("data/hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("data/hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("data/hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
# Calculate the geographical detector q-statistic
ssh.test(object=hs.join, y="Population", x=c("STR_1", "STR_2"), test="factor")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.cap = " ", fig.path='figs/')
# Import sandwichr package
library("sandwichr")
# Input data from shapefiles
hs.sampling.name <- system.file("data/hs.sampling.shapefile.shp",
package="sandwichr")
hs.ssh.name <- system.file("data/hs.ssh.shapefile.shp",
package="sandwichr")
hs.reporting.name <- system.file("data/hs.reporting.shapefile.shp",
package="sandwichr")
hs.data <- load.data.shp(sampling.file=hs.sampling.name,
ssh.file=hs.ssh.name,
reporting.file=hs.reporting.name)
# Input another candidate SSH layer for demonstration
hs.ssh2.name <- system.file("data/hs.ssh2.shapefile.shp",
package="sandwichr")
hs.ssh2 <- read_sf(dsn=dirname(hs.ssh2.name),
layer=file_path_sans_ext(basename(hs.ssh2.name)))
# Prepare the SSH layer(s) for evaluation
hs.join <- ssh.data.shp(object=hs.data[[1]], ssh.lyr=hs.data[[2]], ssh.id="STR_1")
hs.join <- ssh.data.shp(object=hs.join, ssh.lyr=hs.ssh2, ssh.id="STR_2")
head(hs.join)
